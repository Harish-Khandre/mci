!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!JavaScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!JavaScript	G,getter	/getters/
!_TAG_KIND_DESCRIPTION!JavaScript	M,field	/fields/
!_TAG_KIND_DESCRIPTION!JavaScript	S,setter	/setters/
!_TAG_KIND_DESCRIPTION!JavaScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!JavaScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!JavaScript	g,generator	/generators/
!_TAG_KIND_DESCRIPTION!JavaScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!JavaScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!JavaScript	v,variable	/global variables/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!TypeScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!TypeScript	G,generator	/generators/
!_TAG_KIND_DESCRIPTION!TypeScript	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!TypeScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!TypeScript	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!TypeScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!TypeScript	g,enum	/enums/
!_TAG_KIND_DESCRIPTION!TypeScript	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!TypeScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!TypeScript	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!TypeScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!TypeScript	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!JavaScript	1.1	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!TypeScript	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/hgk/code/dsa/mci/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/20c969b32/
!_TAG_ROLE_DESCRIPTION!JavaScript!function	foreigndecl	/declared in foreign languages/
2	Problems/Backtracking/later-combo-of-a-phone-number.js	/^  2: ["a", "b", "c"],$/;"	p	variable:phoneButtons
3	Problems/Backtracking/later-combo-of-a-phone-number.js	/^  3: ["d", "e", "f"],$/;"	p	variable:phoneButtons
4	Problems/Backtracking/later-combo-of-a-phone-number.js	/^  4: ["g", "h", "i"],$/;"	p	variable:phoneButtons
5	Problems/Backtracking/later-combo-of-a-phone-number.js	/^  5: ["j", "k", "l"],$/;"	p	variable:phoneButtons
6	Problems/Backtracking/later-combo-of-a-phone-number.js	/^  6: ["m", "n", "o"],$/;"	p	variable:phoneButtons
7	Problems/Backtracking/later-combo-of-a-phone-number.js	/^  7: ["p", "q", "r", "s"],$/;"	p	variable:phoneButtons
8	Problems/Backtracking/later-combo-of-a-phone-number.js	/^  8: ["t", "u", "v"],$/;"	p	variable:phoneButtons
9	Problems/Backtracking/later-combo-of-a-phone-number.js	/^  9: ["w", "x", "y", "z"],$/;"	p	variable:phoneButtons
AdjacencyList	Practise-stuff/Implementations/global.d.ts	/^declare type AdjacencyList = number[][];$/;"	a
AdjacencyMatrix	Practise-stuff/Implementations/global.d.ts	/^declare type AdjacencyMatrix = number[][]; \/\/ A 1 means connected$/;"	a
BinaryNode	Practise-stuff/Implementations/global.d.ts	/^declare type BinaryNode<T> = {$/;"	a
BinarySearchTree	Practise-stuff/Implementations/binary-tree.js	/^class BinarySearchTree {$/;"	c
CompleteGraphEdge	Practise-stuff/Implementations/global.d.ts	/^declare type CompleteGraphEdge = { from: number; to: number; weight: number };$/;"	a
DoublyLinkedList	Practise-stuff/Implementations/doubly-linked-list.js	/^class DoublyLinkedList {$/;"	c
DoublyLinkedList	Problems/Linked-list/LRU-cache.js	/^class DoublyLinkedList {$/;"	c
GeneralNode	Practise-stuff/Implementations/global.d.ts	/^declare type GeneralNode<T> = {$/;"	a
Graph	Practise-stuff/Implementations/graph.js	/^class Graph {$/;"	c
GraphEdge	Practise-stuff/Implementations/global.d.ts	/^declare type GraphEdge = { to: number; weight: number };$/;"	a
HashTable	Practise-stuff/Implementations/hash-table.js	/^class HashTable {$/;"	c
ILRU	Practise-stuff/Implementations/global.d.ts	/^declare interface ILRU<K, V> {$/;"	i
Job	Practise-stuff/Implementations/constructor.js	/^class Job extends Khandre {$/;"	c
Khandre	Practise-stuff/Implementations/constructor.js	/^class Khandre {$/;"	c
KthLargest	Problems/Heap/Kth-largest-elements-in-a-stream.js	/^const KthLargest = function (k, nums) {$/;"	c
LRUCache	Problems/Linked-list/LRU-cache.js	/^class LRUCache {$/;"	c
LinkedList	Practise-stuff/Implementations/linked-list.js	/^class LinkedList {$/;"	c
List	Practise-stuff/Implementations/global.d.ts	/^declare interface List<T> {$/;"	i
List	Problems/Linked-list/add-two-numbers.js	/^  const List = new ListNode(0);$/;"	C
ListNode	Practise-stuff/Implementations/global.d.ts	/^declare type ListNode<T> = {$/;"	a
MaxHeap	Problems/Heap/find-median-from-data-stream.js	/^class MaxHeap {$/;"	c
MaxHeap	Problems/Heap/task-scheduler.js	/^function MaxHeap() {$/;"	c
MedianFinder	Problems/Heap/find-median-from-data-stream.js	/^const MedianFinder = function () {$/;"	c
MinHeap	Practise-stuff/Implementations/min-heap.ts	/^export default class MinHeap {$/;"	c
MinHeap	Problems/Heap/Kth-largest-element-in-an-array.js	/^class MinHeap {$/;"	c
MinHeap	Problems/Heap/find-median-from-data-stream.js	/^class MinHeap {$/;"	c
MinStack	Problems/Stack/min-stack.js	/^const MinStack = function () {$/;"	c
MyQueue	Problems/Stack/implement-queue-using-stacks.js	/^class MyQueue {$/;"	c
Node	Practise-stuff/Implementations/binary-tree.js	/^class Node {$/;"	c
Node	Practise-stuff/Implementations/queue.js	/^class Node {$/;"	c
Node	Practise-stuff/Implementations/stack.js	/^class Node {$/;"	c
Node	Problems/Linked-list/LRU-cache.js	/^class Node {$/;"	c
Point	Practise-stuff/Implementations/global.d.ts	/^declare type Point = {$/;"	a
Queue	Practise-stuff/Implementations/queue.js	/^class Queue {$/;"	c
Queue	Problems/Stack/implement-queue-using-stacks.js	/^const Queue = function () {$/;"	c
Stack	Practise-stuff/Implementations/stack.js	/^class Stack {$/;"	c
Trie	Practise-stuff/Implementations/trie.js	/^class Trie {$/;"	c
Trie	Problems/Trie/implement-trie.js	/^class Trie {$/;"	c
TrieNode	Problems/Trie/design-add&search-words.js	/^class TrieNode {$/;"	c
TrieNode	Problems/Trie/word-search-2.js	/^class TrieNode {$/;"	c
Twitter	Problems/Heap/design-twitter.js	/^const Twitter = function () {$/;"	c
WeightedAdjacencyList	Practise-stuff/Implementations/global.d.ts	/^declare type WeightedAdjacencyList = GraphEdge[][];$/;"	a
WeightedAdjacencyMatrix	Practise-stuff/Implementations/global.d.ts	/^declare type WeightedAdjacencyMatrix = number[][]; \/\/ A number means weight$/;"	a
WordDictionary	Problems/Trie/design-add&search-words.js	/^class WordDictionary {$/;"	c
_box	Problems/Arrays/valid-soduku.js	/^      const _box =$/;"	C
_col	Problems/Arrays/valid-soduku.js	/^      const _col = board[j][i];$/;"	C
_hash	Practise-stuff/Implementations/hash-table.js	/^  _hash(key) {$/;"	m	class:HashTable
_row	Problems/Arrays/valid-soduku.js	/^      const _row = board[i][j];$/;"	C
a	Problems/Stack/evaluate-reverse-polish-notation.js	/^      const a = stack.pop();$/;"	C
add	Problems/Heap/Kth-largest-element-in-an-array.js	/^  add(value) {$/;"	m	class:MinHeap
add	Problems/Heap/Kth-largest-elements-in-a-stream.js	/^KthLargest.prototype.add = function (val) {$/;"	m	class:KthLargest
add	Problems/Heap/design-twitter.js	/^function add(heap, val) {$/;"	f
add	Problems/Heap/k-closet-points-to-origin.js	/^  function add(heap, node, weightFunction) {$/;"	f
addEdge	Practise-stuff/Implementations/graph.js	/^  addEdge(node1, node2) {$/;"	m	class:Graph
addNum	Problems/Heap/find-median-from-data-stream.js	/^MedianFinder.prototype.addNum = function (num) {$/;"	m	class:MedianFinder
addToFront	Problems/Linked-list/LRU-cache.js	/^  addToFront(key, value) {$/;"	m	class:DoublyLinkedList
addTwoNumbers	Problems/Linked-list/add-two-numbers.js	/^const addTwoNumbers = (l1, l2) => {$/;"	f
addVertex	Practise-stuff/Implementations/graph.js	/^  addVertex(node) {$/;"	m	class:Graph
addWord	Problems/Trie/design-add&search-words.js	/^	addWord(word, node = this.root) {$/;"	m	class:WordDictionary
adjacentList	Practise-stuff/Implementations/graph.js	/^    this.adjacentList[node] = [];$/;"	p	method:Graph.addVertex
adjs	Practise-stuff/Implementations/bfs-on-graph-matrix.ts	/^    const adjs = graph[curr];$/;"	C	function:bfs
append	Practise-stuff/Implementations/doubly-linked-list.js	/^  append(value) {$/;"	m	class:DoublyLinkedList
append	Practise-stuff/Implementations/global.d.ts	/^  append(item: T): void;$/;"	m	interface:List
append	Practise-stuff/Implementations/linked-list.js	/^  append(value) {$/;"	m	class:LinkedList
area	Problems/Graph/max-area-of-islands.js	/^        const area = dfs(i, j);$/;"	C
array	Practise-stuff/Implementations/stack.js	/^    this.array = [];$/;"	p	method:arrayStack.constructor
array1	Problems/Arrays/comman-item.js	/^const array1 = ['a', 'b', 'c', 'x'];$/;"	v
array2	Problems/Arrays/comman-item.js	/^const array2 = ['z', 'y', 'a'];$/;"	v
arrayOfHiNTimes	Practise-stuff/Big-O/space-complexity.js	/^function arrayOfHiNTimes(n) {$/;"	f
arrayStack	Practise-stuff/Implementations/stack.js	/^class arrayStack {$/;"	c
atlantic	Problems/Graph/pacific-altnatic-water-flow.js	/^  const atlantic = Array.from(Array(rows), () => Array(cols).fill(false));$/;"	C
b	Problems/Stack/evaluate-reverse-polish-notation.js	/^      const b = stack.pop();$/;"	C
backTrack	Problems/Backtracking/later-combo-of-a-phone-number.js	/^const backTrack = (digits, char, combination, combinations) => {$/;"	f
backtrack	Problems/Backtracking/palindrome-partitioning.js	/^  const backtrack = (startIdx) => {$/;"	f
backtrack	Problems/Backtracking/subset-II.js	/^  function backtrack(currentSubset, startIndex) {$/;"	f
backtrack	Problems/Stack/generate-parentheses.js	/^  const backtrack = (openN, closedN) => {$/;"	f
bfs	Practise-stuff/Implementations/bfs-on-graph-matrix.ts	/^export default function bfs($/;"	f
bfs	Practise-stuff/Implementations/breadth-first-search.ts	/^export default function bfs(head: BinaryNode<number>, needle: number): boolean {$/;"	f
bfs	Problems/Graph/number-of-islands.js	/^const bfs = (grid, rows, cols, queue) => {$/;"	f
boooo	Practise-stuff/Big-O/space-complexity.js	/^function boooo(n) {$/;"	f
box	Problems/Arrays/valid-soduku.js	/^    const box = new Set();$/;"	C
boxes	Practise-stuff/Big-O/o(1).js	/^const boxes = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"];$/;"	v
bubbleDown	Problems/Heap/Kth-largest-element-in-an-array.js	/^  bubbleDown(index) {$/;"	m	class:MinHeap
bubbleUp	Problems/Heap/Kth-largest-element-in-an-array.js	/^  bubbleUp(index) {$/;"	m	class:MinHeap
build	Problems/Trees/construct-BT-from-preorder-&-inorder.js	/^  build = (inorderStart, inorderEnd) => {$/;"	f
buildTree	Problems/Trees/construct-BT-from-preorder-&-inorder.js	/^const buildTree = (preorder, inorder) => {$/;"	f
buildTree	Problems/Trees/serialize-deserialize-BT.js	/^  function buildTree() {$/;"	f	function:deserialize
carFleet	Problems/Stack/car-fleet.js	/^const carFleet = (target, position, speed) => {$/;"	f
carry	Problems/Linked-list/add-two-numbers.js	/^  let carry = 0;$/;"	v
char	Problems/Stack/valid-parenthenses.js	/^    const char = s[i];$/;"	C
char	Problems/Trie/word-search-2.js	/^		const char = board[x][y];$/;"	C
check	Problems/Trees/validate-BST.js	/^  const check = (node, min, max) => {$/;"	f	function:isValidBST
check	Problems/Two-pointers/valid-palindrome.js	/^const check = (s) => {$/;"	f
childNode	Problems/Trie/word-search-2.js	/^		const childNode = node.children.get(char);$/;"	C
cloneGraph	Problems/Graph/clone-graph.js	/^const cloneGraph = (node) => {$/;"	f
cnt	Problems/Heap/task-scheduler.js	/^      const cnt = maxHeap.getMax() - 1;$/;"	C
col	Problems/Arrays/valid-soduku.js	/^    const col = new Set();$/;"	C
col	Problems/Graph/number-of-islands.js	/^      const [row, col] = queue.dequeue();$/;"	C
cols	Problems/Graph/number-of-islands.js	/^  const [rows, cols] = [grid.length, grid[0].length];$/;"	v
cols	Problems/Graph/pacific-altnatic-water-flow.js	/^  const cols = heights[0].length;$/;"	C
combinationSum	Problems/Backtracking/combination-sum.js	/^const combinationSum = (candidates, target) => {$/;"	f
combinationSum2	Problems/Backtracking/combination-sum-II.js	/^const combinationSum2 = (candidates, target) => {$/;"	f
compressBoxesTwice	Practise-stuff/Big-O/o(n^2).js	/^function compressBoxesTwice(boxes, boxes2) {$/;"	f
compressBoxesTwice2	Practise-stuff/Big-O/o(n^2).js	/^function compressBoxesTwice2(boxes, boxes2) {$/;"	f
compressFirstBox	Practise-stuff/Big-O/o(1).js	/^function compressFirstBox(boxes) {$/;"	f
constructor	Practise-stuff/Implementations/binary-tree.js	/^  constructor() {$/;"	m	class:BinarySearchTree
constructor	Practise-stuff/Implementations/binary-tree.js	/^  constructor(value) {$/;"	m	class:Node
constructor	Practise-stuff/Implementations/constructor.js	/^  constructor(name, type) {$/;"	m	class:Job
constructor	Practise-stuff/Implementations/constructor.js	/^  constructor(name, type) {$/;"	m	class:Khandre
constructor	Practise-stuff/Implementations/doubly-linked-list.js	/^  constructor(value) {$/;"	m	class:DoublyLinkedList
constructor	Practise-stuff/Implementations/graph.js	/^  constructor() {$/;"	m	class:Graph
constructor	Practise-stuff/Implementations/hash-table.js	/^  constructor(size) {$/;"	m	class:HashTable
constructor	Practise-stuff/Implementations/linked-list.js	/^  constructor(value) {$/;"	m	class:LinkedList
constructor	Practise-stuff/Implementations/min-heap.ts	/^  constructor() {$/;"	m	class:MinHeap
constructor	Practise-stuff/Implementations/queue.js	/^  constructor() {$/;"	m	class:Queue
constructor	Practise-stuff/Implementations/queue.js	/^  constructor(value) {$/;"	m	class:Node
constructor	Practise-stuff/Implementations/stack.js	/^  constructor() {$/;"	m	class:Stack
constructor	Practise-stuff/Implementations/stack.js	/^  constructor() {$/;"	m	class:arrayStack
constructor	Practise-stuff/Implementations/stack.js	/^  constructor(value) {$/;"	m	class:Node
constructor	Practise-stuff/Implementations/trie.js	/^  constructor() {$/;"	m	class:Trie
constructor	Problems/Heap/Kth-largest-element-in-an-array.js	/^  constructor() {$/;"	m	class:MinHeap
constructor	Problems/Heap/find-median-from-data-stream.js	/^  constructor() {$/;"	m	class:MaxHeap
constructor	Problems/Heap/find-median-from-data-stream.js	/^  constructor() {$/;"	m	class:MinHeap
constructor	Problems/Linked-list/LRU-cache.js	/^  constructor() {$/;"	m	class:DoublyLinkedList
constructor	Problems/Linked-list/LRU-cache.js	/^  constructor(capacity) {$/;"	m	class:LRUCache
constructor	Problems/Linked-list/LRU-cache.js	/^  constructor(key, value) {$/;"	m	class:Node
constructor	Problems/Stack/implement-queue-using-stacks.js	/^  constructor() {$/;"	m	class:MyQueue
constructor	Problems/Trie/design-add&search-words.js	/^	constructor() {$/;"	m	class:TrieNode
constructor	Problems/Trie/design-add&search-words.js	/^	constructor() {$/;"	m	class:WordDictionary
constructor	Problems/Trie/implement-trie.js	/^	constructor() {$/;"	m	class:Trie
constructor	Problems/Trie/word-search-2.js	/^	constructor() {$/;"	m	class:TrieNode
containerHeight	Problems/Two-pointers/container-with-most-water.js	/^    let containerHeight;$/;"	v
containerWidth	Problems/Two-pointers/container-with-most-water.js	/^    const containerWidth = right - left;$/;"	C
containsCommonItem	Problems/Arrays/comman-item.js	/^function containsCommonItem(arr1, arr2) {$/;"	f
containsCommonItem2	Problems/Arrays/comman-item.js	/^function containsCommonItem2(arr1, arr2) {$/;"	f
containsCommonItem3	Problems/Arrays/comman-item.js	/^function containsCommonItem3(arr1, arr2) {$/;"	f
containsDuplicate	Problems/Arrays/contains-duplicate.js	/^const containsDuplicate = (nums) => {$/;"	f
copyRandomList	Problems/Linked-list/copy-list-with-random-pointers.js	/^const copyRandomList = (head) => {$/;"	f
count	Problems/Arrays/top-k-frequent-elements.js	/^  let count = 0;$/;"	v
count	Problems/Graph/max-area-of-islands.js	/^    let count = 1;$/;"	v
count	Problems/Heap/task-scheduler.js	/^  const count = {};$/;"	C
count	Problems/Trees/count-good-nodes-in-BT.js	/^  let count = 0;$/;"	v
countGoodNodes	Problems/Trees/count-good-nodes-in-BT.js	/^const countGoodNodes = (root) => countGoodNodesHelper(root, -Infinity);$/;"	f
countGoodNodesHelper	Problems/Trees/count-good-nodes-in-BT.js	/^function countGoodNodesHelper(node, maxValueInPath) {$/;"	f
counter	Problems/Arrays/longest-consecutive-sequence.js	/^      let counter = 1;$/;"	v
curr	Practise-stuff/Implementations/bfs-on-graph-matrix.ts	/^    const adjs = graph[curr];$/;"	C	function:bfs
curr	Practise-stuff/Implementations/bfs-on-graph-matrix.ts	/^    const curr = q.shift() as number;$/;"	C	function:bfs
curr	Practise-stuff/Implementations/breadth-first-search.ts	/^    const curr = q.shift() as BinaryNode<number> | undefined | null;$/;"	C	function:bfs
curr	Practise-stuff/Implementations/dfs-on-graph-list.ts	/^  const list = graph[curr];$/;"	C	function:walk
currNum	Problems/Arrays/longest-consecutive-sequence.js	/^      let currNum = num;$/;"	v
curr_streak	Problems/Arrays/longest-consecutive-sequence.js	/^    let curr_streak = 1;$/;"	v
current	Problems/Linked-list/merge-two-sorted-list.js	/^  let current = dummy;$/;"	v
current	Problems/Linked-list/reorder-list.js	/^  let current = slow.next;$/;"	v
current	Problems/Trees/BT-level-order-treversal.js	/^      const current = queue.shift();$/;"	C
current	Problems/Trees/BT-right-side-view.js	/^      const current = queue.shift();$/;"	C
currentArea	Problems/Two-pointers/container-with-most-water.js	/^    let currentArea;$/;"	v
currentList	Problems/Backtracking/palindrome-partitioning.js	/^  const currentList = [];$/;"	v
dailyTemperatures	Problems/Stack/daily-temperature.js	/^function dailyTemperatures(temperatures) {$/;"	f
data	Practise-stuff/Implementations/hash-table.js	/^      this.data[address] = [];$/;"	p	method:HashTable.set
data	Practise-stuff/Implementations/min-heap.ts	/^  private data: number[];$/;"	p	class:MinHeap
deepCopy	Problems/Linked-list/copy-list-with-random-pointers.js	/^  const deepCopy = (node) => {$/;"	f
delete	Practise-stuff/Implementations/min-heap.ts	/^  delete(): number {$/;"	m	class:MinHeap
delete	Problems/Heap/task-scheduler.js	/^  this.delete = () => {$/;"	f	class:MaxHeap
deque	Problems/Heap/task-scheduler.js	/^  const deque = []; \/\/ pair of [count, idleTime]$/;"	v
dequeue	Practise-stuff/Implementations/queue.js	/^  dequeue() {$/;"	m	class:Queue
deserialize	Problems/Trees/serialize-deserialize-BT.js	/^function deserialize(data) {$/;"	f
dfs	Practise-stuff/Implementations/depth-first-search.ts	/^export default function dfs(head: BinaryNode<number>, needle: number): boolean {$/;"	f
dfs	Practise-stuff/Implementations/dfs-on-graph-list.ts	/^export default function dfs($/;"	f
dfs	Problems/Backtracking/combination-sum-II.js	/^  const dfs = (path, remainder, start) => {$/;"	f
dfs	Problems/Backtracking/combination-sum.js	/^  function dfs(index, currentVal, arr) {$/;"	f
dfs	Problems/Backtracking/n-queens.js	/^const dfs = (board, n, colSet, posDiagSet, negDiagSet, row = 0, moves = []) => {$/;"	f
dfs	Problems/Backtracking/subsets.js	/^  function dfs(index, currentSubset) {$/;"	f
dfs	Problems/Backtracking/word-search.js	/^  const dfs = (row, col, index) => {$/;"	f
dfs	Problems/Graph/clone-graph.js	/^  function dfs(node) {$/;"	f
dfs	Problems/Graph/max-area-of-islands.js	/^  const dfs = (row, col) => {$/;"	f
dfs	Problems/Graph/pacific-altnatic-water-flow.js	/^  const dfs = (r, c, ocean) => {$/;"	f
dfs	Problems/Trees/BT-max-path-sum.js	/^  const dfs = (root) => {$/;"	f
dfs	Problems/Trees/count-good-nodes-in-BT.js	/^  const dfs = (node, max) => {$/;"	f
dfs	Problems/Trie/design-add&search-words.js	/^	dfs(word, node, level) {$/;"	m	class:WordDictionary
dfs	Problems/Trie/word-search-2.js	/^	const dfs = (node, x, y, path) => {$/;"	f
diameterOfBinaryTree	Problems/Trees/diameter-of-BT.js	/^const diameterOfBinaryTree = (root) => {$/;"	f
diff	Problems/Heap/last-stone-weight.js	/^      const diff = stones[0] - stones[nextMaxIndex];$/;"	C
diff	Problems/Heap/last-stone-weight.js	/^    const diff = heap.dequeue().element - heap.dequeue().element;$/;"	C
dir	Practise-stuff/maze-solver.ts	/^const dir = [$/;"	C
directions	Problems/Graph/pacific-altnatic-water-flow.js	/^  const directions = [$/;"	v
directions	Problems/Trie/word-search-2.js	/^		const directions = [$/;"	v
distance	Problems/Heap/k-closet-points-to-origin.js	/^  function distance(point) {$/;"	f
dummy	Problems/Linked-list/merge-k-sorted-lists.js	/^  let dummy = new ListNode(0);$/;"	v
dummy	Problems/Linked-list/merge-two-sorted-list.js	/^  const dummy = new ListNode();$/;"	C
dummy	Problems/Linked-list/remove-nth-node.js	/^  const dummy = new ListNode(0);$/;"	C
dummy	Problems/Linked-list/reverse-nodes-in-k-group.js	/^  const dummy = new ListNode(0);$/;"	C
edge	Practise-stuff/Implementations/dfs-on-graph-list.ts	/^    const edge = list[i];$/;"	C	function:walk
empty	Problems/Stack/implement-queue-using-stacks.js	/^  empty() {$/;"	m	class:MyQueue
empty	Problems/Stack/implement-queue-using-stacks.js	/^Queue.prototype.empty = function () {$/;"	m	class:Queue
enqueue	Practise-stuff/Implementations/queue.js	/^  enqueue(value) {$/;"	m	class:Queue
evalRPN	Problems/Stack/evaluate-reverse-polish-notation.js	/^const evalRPN = (tokends) => {$/;"	f
exist	Problems/Backtracking/word-search.js	/^const exist = (board, word) => {$/;"	f
fast	Problems/Linked-list/find-duplicate-number.js	/^  let fast = 0;$/;"	v
fast	Problems/Linked-list/linked-list-cycle.js	/^  let fast = head;$/;"	v
fast	Problems/Linked-list/reorder-list.js	/^  let fast = head;$/;"	v
findDuplicate	Problems/Linked-list/find-duplicate-number.js	/^const findDuplicate = (nums) => {$/;"	f
findKthLargest	Problems/Heap/Kth-largest-element-in-an-array.js	/^const findKthLargest = (nums, k) => {$/;"	f
findKthLargest2	Problems/Heap/Kth-largest-element-in-an-array.js	/^const findKthLargest2 = (nums, k) => {$/;"	f
findMax	Problems/Heap/task-scheduler.js	/^  this.findMax = () => (this.list.length > 0 ? this.list[0] : null);$/;"	f	class:MaxHeap
findMedian	Problems/Heap/find-median-from-data-stream.js	/^MedianFinder.prototype.findMedian = function () {$/;"	m	class:MedianFinder
findWords	Problems/Trie/word-search-2.js	/^const findWords = (board, words) => {$/;"	f
fleets	Problems/Stack/car-fleet.js	/^  let fleets = 0;$/;"	v
follow	Problems/Heap/design-twitter.js	/^Twitter.prototype.follow = function (followerId, followeeId) {$/;"	m	class:Twitter
generateParenthesis	Problems/Stack/generate-parentheses.js	/^const generateParenthesis = (n) => {$/;"	f
get	Practise-stuff/Implementations/global.d.ts	/^  get length(): number;$/;"	p	interface:List
get	Practise-stuff/Implementations/global.d.ts	/^  get(index: number): T | undefined;$/;"	m	interface:List
get	Practise-stuff/Implementations/global.d.ts	/^  get(key: K): V | undefined;$/;"	m	interface:ILRU
get	Practise-stuff/Implementations/hash-table.js	/^  get(key) {$/;"	m	class:HashTable
get	Problems/Linked-list/LRU-cache.js	/^  get(key) {$/;"	m	class:LRUCache
getMax	Problems/Heap/task-scheduler.js	/^  this.getMax = () => this.delete();$/;"	f	class:MaxHeap
getMin	Problems/Stack/min-stack.js	/^MinStack.prototype.getMin = function () {$/;"	m	class:MinStack
getNeighbors	Problems/Graph/number-of-islands.js	/^const getNeighbors = (row, rows, col, cols) =>$/;"	f
getNewsFeed	Problems/Heap/design-twitter.js	/^Twitter.prototype.getNewsFeed = function (userId) {$/;"	m	class:Twitter
goodNodes	Problems/Trees/count-good-nodes-in-BT.js	/^const goodNodes = (root) => {$/;"	f
groupAnagrams	Problems/Arrays/group-anagrams.js	/^const groupAnagrams = (strs) => {$/;"	f
h1	Problems/Linked-list/reorder-list.js	/^  let h1 = head;$/;"	v
h2	Problems/Linked-list/reorder-list.js	/^  let h2 = prev;$/;"	v
hasCycle	Problems/Linked-list/linked-list-cycle.js	/^const hasCycle = (head) => {$/;"	f
hasPairWithSum	Problems/Arrays/two-sum.js	/^function hasPairWithSum(arr, sum) {$/;"	f
hasPairWithSum2	Problems/Arrays/two-sum.js	/^function hasPairWithSum2(arr, sum) {$/;"	f
hasWildCard	Problems/Trie/design-add&search-words.js	/^	hasWildCard(word, node, level) {$/;"	m	class:WordDictionary
head	Practise-stuff/Implementations/doubly-linked-list.js	/^    this.head = {$/;"	p	method:DoublyLinkedList.constructor
head	Practise-stuff/Implementations/linked-list.js	/^    this.head = {$/;"	p	method:LinkedList.constructor
head	Problems/Linked-list/add-two-numbers.js	/^  let head = List;$/;"	v
head	Problems/Linked-list/merge-k-sorted-lists.js	/^  const head = dummy;$/;"	C
heap	Problems/Heap/Kth-largest-element-in-an-array.js	/^    this.heap = [];$/;"	p	method:MinHeap.constructor
heap	Problems/Heap/find-median-from-data-stream.js	/^    [this.heap[i], this.heap[j]] = [this.heap[j], this.heap[i]];$/;"	p
heap	Problems/Heap/find-median-from-data-stream.js	/^    this.heap = [];$/;"	p	method:MaxHeap.constructor
heap	Problems/Heap/find-median-from-data-stream.js	/^    this.heap = [];$/;"	p	method:MinHeap.constructor
heap	Problems/Heap/k-closet-points-to-origin.js	/^  const heap = [];$/;"	v
heap	Problems/Heap/last-stone-weight.js	/^  const heap = new MaxPriorityQueue();$/;"	C
heapify	Problems/Heap/last-stone-weight.js	/^const heapify = (nums, i) => {$/;"	f
heapifyDown	Practise-stuff/Implementations/min-heap.ts	/^  private heapifyDown(idx: number): void {$/;"	m	class:MinHeap
heapifyDown	Problems/Heap/Kth-largest-elements-in-a-stream.js	/^KthLargest.prototype.heapifyDown = function (i) {$/;"	m	class:KthLargest
heapifyDown	Problems/Heap/design-twitter.js	/^function heapifyDown(heap, i) {$/;"	f
heapifyDown	Problems/Heap/find-median-from-data-stream.js	/^  heapifyDown() {$/;"	m	class:MaxHeap
heapifyDown	Problems/Heap/find-median-from-data-stream.js	/^  heapifyDown() {$/;"	m	class:MinHeap
heapifyDown	Problems/Heap/k-closet-points-to-origin.js	/^  function heapifyDown(heap, idx, weightFunction) {$/;"	f
heapifyUp	Practise-stuff/Implementations/min-heap.ts	/^  private heapifyUp(idx: number): void {$/;"	m	class:MinHeap
heapifyUp	Problems/Heap/Kth-largest-elements-in-a-stream.js	/^KthLargest.prototype.heapifyUp = function (i) {$/;"	m	class:KthLargest
heapifyUp	Problems/Heap/design-twitter.js	/^function heapifyUp(heap, i) {$/;"	f
heapifyUp	Problems/Heap/find-median-from-data-stream.js	/^  heapifyUp() {$/;"	m	class:MaxHeap
heapifyUp	Problems/Heap/find-median-from-data-stream.js	/^  heapifyUp() {$/;"	m	class:MinHeap
heapifyUp	Problems/Heap/k-closet-points-to-origin.js	/^  function heapifyUp(heap, idx, weightFunction) {$/;"	f
heights	Problems/Graph/pacific-altnatic-water-flow.js	/^const heights = [$/;"	v
highest	Problems/Heap/last-stone-weight.js	/^  let highest = i;$/;"	v
hl	Problems/Trees/balanced-BT.js	/^  const hl = isBalanced(root.left);$/;"	C
hr	Problems/Trees/balanced-BT.js	/^  const hr = isBalanced(root.right);$/;"	C
i	Practise-stuff/Implementations/dfs-on-graph-list.ts	/^    const edge = list[i];$/;"	C	function:walk
idx	Practise-stuff/Implementations/min-heap.ts	/^    const v = this.data[idx];$/;"	C	method:MinHeap.heapifyDown
idx	Practise-stuff/Implementations/min-heap.ts	/^    const v = this.data[idx];$/;"	C	method:MinHeap.heapifyUp
inOrderTraversal	Problems/Trees/Kth-smallest-element-in-BST.js	/^  const inOrderTraversal = (node) => {$/;"	f
index	Practise-stuff/maze-solver.ts	/^    const [x, y] = dir[index];$/;"	C	function:walk
index	Problems/Arrays/move-zeroes.js	/^  let index = 0;$/;"	v
inorderIndex	Problems/Trees/construct-BT-from-preorder-&-inorder.js	/^    const inorderIndex = inorder_map.get(root_val);$/;"	C
inorder_map	Problems/Trees/construct-BT-from-preorder-&-inorder.js	/^  const inorder_map = new Map();$/;"	C
insert	Practise-stuff/Implementations/binary-tree.js	/^  insert(value) {$/;"	m	class:BinarySearchTree
insert	Practise-stuff/Implementations/doubly-linked-list.js	/^  insert(index, value) {$/;"	m	class:DoublyLinkedList
insert	Practise-stuff/Implementations/linked-list.js	/^  insert(index, value) {$/;"	m	class:LinkedList
insert	Practise-stuff/Implementations/min-heap.ts	/^  insert(value: number): void {$/;"	m	class:MinHeap
insert	Practise-stuff/Implementations/trie.js	/^  insert(word) {$/;"	m	class:Trie
insert	Problems/Heap/task-scheduler.js	/^  this.insert = (value) => {$/;"	f	class:MaxHeap
insert	Problems/Trie/implement-trie.js	/^	insert(word) {$/;"	m	class:Trie
insert	Problems/Trie/word-search-2.js	/^	insert(word) {$/;"	m	class:TrieNode
insertAt	Practise-stuff/Implementations/global.d.ts	/^  insertAt(item: T, idx: number): void;$/;"	m	interface:List
introduce	Practise-stuff/Implementations/constructor.js	/^  introduce() {$/;"	m	class:Khandre
invertTree	Problems/Trees/invert-tree.js	/^const invertTree = (root) => {$/;"	f
isAnagram	Problems/Arrays/valid-anagram.js	/^const isAnagram = (s, t) => {$/;"	f
isBalanced	Problems/Trees/balanced-BT.js	/^const isBalanced = (root) => {$/;"	f
isBaseCase	Problems/Backtracking/later-combo-of-a-phone-number.js	/^  const isBaseCase = !digits;$/;"	C
isEmpty	Problems/Heap/find-median-from-data-stream.js	/^  isEmpty() {$/;"	m	class:MaxHeap
isEmpty	Problems/Heap/find-median-from-data-stream.js	/^  isEmpty() {$/;"	m	class:MinHeap
isIsland	Problems/Graph/number-of-islands.js	/^      const isIsland = grid[row][col] === "1";$/;"	C
isPalindrome	Problems/Backtracking/palindrome-partitioning.js	/^  const isPalindrome = (str) => {$/;"	f
isPalindrome	Problems/Two-pointers/valid-palindrome.js	/^const isPalindrome = (s) => {$/;"	f
isPalindrome2	Problems/Two-pointers/valid-palindrome.js	/^const isPalindrome2 = (s) => {$/;"	f
isPalindrome3	Problems/Two-pointers/valid-palindrome.js	/^const isPalindrome3 = (s) => {$/;"	f
isSameTree	Problems/Trees/same-tree.js	/^function isSameTree(p, q) {$/;"	f
isSameTree	Problems/Trees/subtree-of-another-tree.js	/^const isSameTree = (p, q) => {$/;"	f
isSubtree	Problems/Trees/subtree-of-another-tree.js	/^const isSubtree = (root, subRoot) => {$/;"	f
isValid	Problems/Stack/valid-parenthenses.js	/^const isValid = (s) => {$/;"	f
isValidBST	Problems/Trees/validate-BST.js	/^function isValidBST(root) {$/;"	f
isValidSudoku	Problems/Arrays/valid-soduku.js	/^const isValidSudoku = (board) => {$/;"	f
isWater	Problems/Graph/number-of-islands.js	/^      const isWater = grid[row][col] === "0";$/;"	C
kClosest	Problems/Heap/k-closet-points-to-origin.js	/^const kClosest = (points, K) => {$/;"	f
kClosest2	Problems/Heap/k-closet-points-to-origin.js	/^const kClosest2 = (points, k) => {$/;"	f
kClosest3	Problems/Heap/k-closet-points-to-origin.js	/^const kClosest3 = (points, k) => {$/;"	f
key	Problems/Arrays/group-anagrams.js	/^    const key = strs[i].split("").sort().join("");$/;"	C
keys	Practise-stuff/Implementations/hash-table.js	/^  keys() {$/;"	m	class:HashTable
khandre	Practise-stuff/Big-O/o(n).js	/^const khandre = ["Harish", "yash", "ishika", "others"];$/;"	v
kthSmallest	Problems/Trees/Kth-smallest-element-in-BST.js	/^const kthSmallest = (root, k) => {$/;"	f
l	Problems/Two-pointers/3sum.js	/^    let l = i + 1;$/;"	v
lIdx	Practise-stuff/Implementations/min-heap.ts	/^    const lIdx = this.leftChild(idx);$/;"	C	method:MinHeap.heapifyDown
lIdx	Practise-stuff/Implementations/min-heap.ts	/^    const lV = this.data[lIdx];$/;"	C	method:MinHeap.heapifyDown
lV	Practise-stuff/Implementations/min-heap.ts	/^    const lV = this.data[lIdx];$/;"	C	method:MinHeap.heapifyDown
largestRectangleArea	Problems/Stack/largest-rectangle-in-histogram.js	/^function largestRectangleArea(heights) {$/;"	f
lastStoneWeight	Problems/Heap/last-stone-weight.js	/^const lastStoneWeight = (stones) => {$/;"	f
lastStoneWeight2	Problems/Heap/last-stone-weight.js	/^const lastStoneWeight2 = (stones) => {$/;"	f
leastInterval	Problems/Heap/task-scheduler.js	/^const leastInterval = (tasks, n) => {$/;"	f
left	Problems/Backtracking/palindrome-partitioning.js	/^    let left = 0;$/;"	v
left	Problems/Heap/last-stone-weight.js	/^  const left = i * 2 + 1;$/;"	C
left	Problems/Linked-list/remove-nth-node.js	/^  let left = dummy;$/;"	v
left	Problems/Trees/diameter-of-BT.js	/^    const left = maxDepth(root.left); \/\/ Assign the left  of tree to LEFT; this will be easier/;"	C
left	Problems/Trees/maximum-depth-of-invert-tree.js	/^  const left = maxDepth(root.left);$/;"	C
left	Problems/Two-pointers/trapping-rain-water.js	/^  let left = 0;$/;"	v
left	Problems/Two-pointers/two-sum.js	/^  let left = 0;$/;"	v
left	Problems/Two-pointers/valid-palindrome.js	/^  let left = 0;$/;"	v
leftChild	Practise-stuff/Implementations/min-heap.ts	/^  private leftChild(idx: number): number {$/;"	m	class:MinHeap
leftMax	Problems/Trees/BT-max-path-sum.js	/^    let leftMax = dfs(root.left);$/;"	v
leftMax	Problems/Two-pointers/trapping-rain-water.js	/^  let leftMax = height[left];$/;"	v
length	Practise-stuff/Implementations/global.d.ts	/^  get length(): number;$/;"	m	interface:List
length	Practise-stuff/Implementations/min-heap.ts	/^  public length: number;$/;"	p	class:MinHeap
letterCombinations	Problems/Backtracking/later-combo-of-a-phone-number.js	/^const letterCombinations = (digits, combination = [], combinations = []) => {$/;"	f
letters	Problems/Backtracking/later-combo-of-a-phone-number.js	/^  const letters = phoneButtons[digits[0]];$/;"	C
levelArr	Problems/Trees/BT-level-order-treversal.js	/^    const levelArr = [];$/;"	v
levelArr	Problems/Trees/BT-right-side-view.js	/^    const levelArr = [];$/;"	v
levelOrder	Problems/Trees/BT-level-order-treversal.js	/^const levelOrder = (root) => {$/;"	f
levelSize	Problems/Trees/BT-level-order-treversal.js	/^    const levelSize = queue.length;$/;"	C
levelSize	Problems/Trees/BT-right-side-view.js	/^    const levelSize = queue.length;$/;"	C
link	Problems/Linked-list/copy-list-with-random-pointers.js	/^  const link = new Map();$/;"	C
list	Practise-stuff/Implementations/dfs-on-graph-list.ts	/^  const list = graph[curr];$/;"	C	function:walk
list	Problems/Heap/task-scheduler.js	/^        [this.list[i], this.list[parent]] = [this.list[parent], this.list[i]];$/;"	p
list	Problems/Heap/task-scheduler.js	/^      [this.list[i], this.list[largest]] = [this.list[largest], this.list[i]];$/;"	p
list	Problems/Heap/task-scheduler.js	/^  this.list = [];$/;"	p	class:MaxHeap
list1	Problems/Linked-list/merge-k-sorted-lists.js	/^    const list1 = lists.shift();$/;"	C
list2	Problems/Linked-list/merge-k-sorted-lists.js	/^    const list2 = lists.shift();$/;"	C
longest	Problems/Arrays/longest-consecutive-sequence.js	/^  let longest = 1;$/;"	v
longestConsecutive	Problems/Arrays/longest-consecutive-sequence.js	/^const longestConsecutive = (nums) => {$/;"	f
longestConsecutive2	Problems/Arrays/longest-consecutive-sequence.js	/^const longestConsecutive2 = (nums) => {$/;"	f
lookup	Practise-stuff/Implementations/binary-tree.js	/^  lookup(value) {$/;"	m	class:BinarySearchTree
lowestCommonAncestor	Problems/Trees/lowest-common-ancestor.js	/^const lowestCommonAncestor = (root, p, q) => {$/;"	f
m	Problems/Backtracking/word-search.js	/^  const m = board.length;$/;"	C
m	Problems/Trie/word-search-2.js	/^	const m = board.length;$/;"	C
map	Problems/Arrays/group-anagrams.js	/^  const map = new Map();$/;"	C
map	Problems/Arrays/top-k-frequent-elements.js	/^  const map = new Map();$/;"	C
map	Problems/Arrays/two-sum.js	/^  const map = new Map();$/;"	C
mapSort1	Problems/Arrays/top-k-frequent-elements.js	/^  const mapSort1 = new Map([...map.entries()].sort((a, b) => b[1] - a[1]));$/;"	C
max	Problems/Arrays/maximum-subarray.js	/^  let max = nums[0];$/;"	v
max	Problems/Heap/last-stone-weight.js	/^    const max = stones[0];$/;"	C
max	Problems/Trees/diameter-of-BT.js	/^  let max = 0;$/;"	v
max2	Problems/Heap/last-stone-weight.js	/^    const max2 = stones[nextMaxIndex];$/;"	C
maxArea	Problems/Graph/max-area-of-islands.js	/^  let maxArea = 0;$/;"	v
maxArea	Problems/Two-pointers/container-with-most-water.js	/^  let [left, right, maxArea] = [0, height.length - 1, 0];$/;"	v
maxArea	Problems/Two-pointers/container-with-most-water.js	/^const maxArea = (height) => {$/;"	f
maxAreaOfIsland	Problems/Graph/max-area-of-islands.js	/^const maxAreaOfIsland = (grid) => {$/;"	f
maxDepth	Problems/Trees/diameter-of-BT.js	/^  const maxDepth = (root) => {$/;"	f
maxDepth	Problems/Trees/maximum-depth-of-invert-tree.js	/^const maxDepth = (root) => {$/;"	f
maxHeap	Problems/Heap/task-scheduler.js	/^  const maxHeap = new MaxHeap();$/;"	C
maxHeapify	Problems/Heap/task-scheduler.js	/^  this.maxHeapify = (i) => {$/;"	f	class:MaxHeap
maxPathSum	Problems/Trees/BT-max-path-sum.js	/^const maxPathSum = (root) => {$/;"	f
maxSubArray	Problems/Arrays/maximum-subarray.js	/^const maxSubArray = (nums) => {$/;"	f
maxSubArray2	Problems/Arrays/maximum-subarray.js	/^const maxSubArray2 = (nums) => {$/;"	f
member1	Practise-stuff/Implementations/constructor.js	/^const member1 = new Job("harish", "developer");$/;"	C
mergeKLists	Problems/Linked-list/merge-k-sorted-lists.js	/^const mergeKLists = (lists) => {$/;"	f
mergeLists	Problems/Linked-list/merge-k-sorted-lists.js	/^const mergeLists = (list1, list2) => {$/;"	f
mergeSortedArrays	Problems/Arrays/merge-sorted-arrays.js	/^function mergeSortedArrays(array1, array2) {$/;"	f
mergeTwoLists	Problems/Linked-list/merge-two-sorted-list.js	/^const mergeTwoLists = (list1, list2) => {$/;"	f
merged	Problems/Linked-list/merge-k-sorted-lists.js	/^    const merged = mergeLists(list1, list2);$/;"	C
minHeap	Problems/Heap/Kth-largest-element-in-an-array.js	/^  const minHeap = new MinHeap();$/;"	C
minHeap	Problems/Heap/Kth-largest-element-in-an-array.js	/^  const minHeap = new MinPriorityQueue();$/;"	C
minStack	Problems/Stack/min-stack.js	/^  this.minStack = [];$/;"	p	class:MinStack
moveToFront	Problems/Linked-list/LRU-cache.js	/^  moveToFront(node) {$/;"	m	class:DoublyLinkedList
moveZeroes	Problems/Arrays/move-zeroes.js	/^const moveZeroes = (nums) => {$/;"	f
myGraph	Practise-stuff/Implementations/graph.js	/^const myGraph = new Graph();$/;"	C
myHashTable	Practise-stuff/Implementations/hash-table.js	/^const myHashTable = new HashTable(50);$/;"	C
myLinkedList	Practise-stuff/Implementations/doubly-linked-list.js	/^const myLinkedList = new DoublyLinkedList(10);$/;"	C
myLinkedList	Practise-stuff/Implementations/linked-list.js	/^const myLinkedList = new LinkedList(10);$/;"	C
myQueue	Practise-stuff/Implementations/queue.js	/^const myQueue = new Queue();$/;"	C
myStack	Practise-stuff/Implementations/stack.js	/^const myStack = new Stack();$/;"	C
myStack2	Practise-stuff/Implementations/stack.js	/^const myStack2 = new arrayStack();$/;"	C
n	Problems/Backtracking/word-search.js	/^  const n = board[0].length;$/;"	C
n	Problems/Linked-list/reverse-nodes-in-k-group.js	/^  let n = 0;$/;"	v
n	Problems/Trie/word-search-2.js	/^	const n = board[0].length;$/;"	C
negDiagIndex	Problems/Backtracking/n-queens.js	/^    const negDiagIndex = row - col + n - 1;$/;"	C
newCol	Problems/Graph/pacific-altnatic-water-flow.js	/^      const newCol = c + dc;$/;"	C
newNode	Practise-stuff/Implementations/doubly-linked-list.js	/^    const newNode = {$/;"	v	method:DoublyLinkedList.append
newNode	Practise-stuff/Implementations/doubly-linked-list.js	/^    const newNode = {$/;"	v	method:DoublyLinkedList.insert
newNode	Practise-stuff/Implementations/doubly-linked-list.js	/^    const newNode = {$/;"	v	method:DoublyLinkedList.prepend
newNode	Practise-stuff/Implementations/linked-list.js	/^    const newNode = {$/;"	v	method:LinkedList.append
newNode	Practise-stuff/Implementations/linked-list.js	/^    const newNode = {$/;"	v	method:LinkedList.insert
newNode	Practise-stuff/Implementations/linked-list.js	/^    const newNode = {$/;"	v	method:LinkedList.prepend
newNode	Problems/Linked-list/copy-list-with-random-pointers.js	/^    const newNode = new Node(node.val);$/;"	C
newRow	Problems/Graph/pacific-altnatic-water-flow.js	/^      const newRow = r + dr;$/;"	C
newX	Problems/Trie/word-search-2.js	/^			const newX = x + dx;$/;"	C
newY	Problems/Trie/word-search-2.js	/^			const newY = y + dy;$/;"	C
next	Practise-stuff/Implementations/doubly-linked-list.js	/^      next: null,$/;"	p	property:DoublyLinkedList.constructor.head
next	Practise-stuff/Implementations/doubly-linked-list.js	/^      next: null,$/;"	p	variable:DoublyLinkedList.append.newNode
next	Practise-stuff/Implementations/doubly-linked-list.js	/^      next: null,$/;"	p	variable:DoublyLinkedList.insert.newNode
next	Practise-stuff/Implementations/doubly-linked-list.js	/^      next: null,$/;"	p	variable:DoublyLinkedList.prepend.newNode
next	Practise-stuff/Implementations/linked-list.js	/^      next: null,$/;"	p	property:LinkedList.constructor.head
next	Practise-stuff/Implementations/linked-list.js	/^      next: null,$/;"	p	variable:LinkedList.append.newNode
next	Practise-stuff/Implementations/linked-list.js	/^      next: null,$/;"	p	variable:LinkedList.insert.newNode
next	Practise-stuff/Implementations/linked-list.js	/^      next: null,$/;"	p	variable:LinkedList.prepend.newNode
next	Problems/Linked-list/add-two-numbers.js	/^    head.next = new ListNode(sum);$/;"	v	variable:head
next	Problems/Linked-list/reverse-nodes-in-k-group.js	/^      const next = tail.next.next;$/;"	C
nextMaxIndex	Problems/Heap/last-stone-weight.js	/^    const nextMaxIndex = stones[1] > (stones[2] ?? -Infinity) ? 1 : 2;$/;"	C
numIslands	Problems/Graph/number-of-islands.js	/^const numIslands = (grid, connectedComponents = 0) => {$/;"	f
numSet	Problems/Arrays/longest-consecutive-sequence.js	/^  const numSet = new Set(nums);$/;"	C
nums	Problems/Heap/Kth-largest-elements-in-a-stream.js	/^    [this.nums[parent], this.nums[i]] = [this.nums[i], this.nums[parent]];$/;"	p
nums	Problems/Heap/Kth-largest-elements-in-a-stream.js	/^    [this.nums[pos], this.nums[i]] = [this.nums[i], this.nums[pos]];$/;"	p
originalChar	Problems/Backtracking/word-search.js	/^    const originalChar = board[row][col];$/;"	C
out	Practise-stuff/Implementations/bfs-on-graph-matrix.ts	/^  const out: number[] = [];$/;"	C	function:bfs
out	Practise-stuff/Implementations/min-heap.ts	/^    const out = this.data[0];$/;"	C	method:MinHeap.delete
output	Problems/Backtracking/subset-II.js	/^  const output = [];$/;"	v
p	Practise-stuff/Implementations/min-heap.ts	/^    const p = this.parent(idx);$/;"	C	method:MinHeap.heapifyUp
p	Practise-stuff/Implementations/min-heap.ts	/^    const parentV = this.data[p];$/;"	C	method:MinHeap.heapifyUp
p	Problems/Heap/k-closet-points-to-origin.js	/^  const p = Math.floor((points.length - 2) \/ 2); \/\/ last parent$/;"	C
pacific	Problems/Graph/pacific-altnatic-water-flow.js	/^  const pacific = Array.from(Array(rows), () => Array(cols).fill(false));$/;"	C
pacificAtlantic	Problems/Graph/pacific-altnatic-water-flow.js	/^const pacificAtlantic = (heights) => {$/;"	f
parent	Practise-stuff/Implementations/min-heap.ts	/^  private parent(idx: number): number {$/;"	m	class:MinHeap
parentV	Practise-stuff/Implementations/min-heap.ts	/^    const parentV = this.data[p];$/;"	C	method:MinHeap.heapifyUp
partition	Problems/Backtracking/palindrome-partitioning.js	/^const partition = (s) => {$/;"	f
path	Practise-stuff/Implementations/dfs-on-graph-list.ts	/^  const path: number[] = [];$/;"	C	function:dfs
path	Practise-stuff/maze-solver.ts	/^  const path: Point[] = [];$/;"	C	function:solve
peek	Practise-stuff/Implementations/queue.js	/^  peek() {$/;"	m	class:Queue
peek	Practise-stuff/Implementations/stack.js	/^  peek() {$/;"	m	class:Stack
peek	Practise-stuff/Implementations/stack.js	/^  peek() {$/;"	m	class:arrayStack
peek	Problems/Heap/Kth-largest-element-in-an-array.js	/^  peek() {$/;"	m	class:MinHeap
peek	Problems/Heap/find-median-from-data-stream.js	/^  peek() {$/;"	m	class:MaxHeap
peek	Problems/Heap/find-median-from-data-stream.js	/^  peek() {$/;"	m	class:MinHeap
peek	Problems/Stack/implement-queue-using-stacks.js	/^  peek() {$/;"	m	class:MyQueue
peek	Problems/Stack/implement-queue-using-stacks.js	/^Queue.prototype.peek = function () {$/;"	m	class:Queue
permute	Problems/Backtracking/permutation.js	/^const permute = (nums) => {$/;"	f
permuteHelper	Problems/Backtracking/permutation.js	/^function permuteHelper(nums, start, result) {$/;"	f
phoneButtons	Problems/Backtracking/later-combo-of-a-phone-number.js	/^const phoneButtons = {$/;"	v
play	Practise-stuff/Implementations/constructor.js	/^  play() {$/;"	m	class:Job
poll	Problems/Heap/Kth-largest-element-in-an-array.js	/^  poll() {$/;"	m	class:MinHeap
pop	Practise-stuff/Implementations/stack.js	/^  pop() {$/;"	m	class:Stack
pop	Practise-stuff/Implementations/stack.js	/^  pop() {$/;"	m	class:arrayStack
pop	Problems/Heap/find-median-from-data-stream.js	/^  pop() {$/;"	m	class:MaxHeap
pop	Problems/Heap/find-median-from-data-stream.js	/^  pop() {$/;"	m	class:MinHeap
pop	Problems/Stack/implement-queue-using-stacks.js	/^  pop() {$/;"	m	class:MyQueue
pop	Problems/Stack/implement-queue-using-stacks.js	/^Queue.prototype.pop = function () {$/;"	m	class:Queue
pop	Problems/Stack/min-stack.js	/^MinStack.prototype.pop = function () {$/;"	m	class:MinStack
popBack	Problems/Linked-list/LRU-cache.js	/^  popBack() {$/;"	m	class:DoublyLinkedList
popStack	Problems/Stack/implement-queue-using-stacks.js	/^    this.popStack = [];$/;"	p	method:MyQueue.constructor
posDiagIndex	Problems/Backtracking/n-queens.js	/^    const posDiagIndex = row + col;$/;"	C
postTweet	Problems/Heap/design-twitter.js	/^Twitter.prototype.postTweet = function (userId, tweetId) {$/;"	m	class:Twitter
prefix	Problems/Arrays/product-of-array-except-self.js	/^  const prefix = [];$/;"	v
prepend	Practise-stuff/Implementations/doubly-linked-list.js	/^  prepend(value) {$/;"	m	class:DoublyLinkedList
prepend	Practise-stuff/Implementations/global.d.ts	/^  prepend(item: T): void;$/;"	m	interface:List
prepend	Practise-stuff/Implementations/linked-list.js	/^  prepend(value) {$/;"	m	class:LinkedList
prev	Practise-stuff/Implementations/bfs-on-graph-matrix.ts	/^  const prev = new Array(graph.length).fill(-1);$/;"	C	function:bfs
prev	Practise-stuff/Implementations/doubly-linked-list.js	/^      prev: null,$/;"	p	property:DoublyLinkedList.constructor.head
prev	Practise-stuff/Implementations/doubly-linked-list.js	/^      prev: null,$/;"	p	variable:DoublyLinkedList.append.newNode
prev	Practise-stuff/Implementations/doubly-linked-list.js	/^      prev: null,$/;"	p	variable:DoublyLinkedList.insert.newNode
prev	Practise-stuff/Implementations/doubly-linked-list.js	/^      prev: null,$/;"	p	variable:DoublyLinkedList.prepend.newNode
prev	Problems/Linked-list/reorder-list.js	/^  let prev = null;$/;"	v
prev	Problems/Linked-list/reverse-linked-list.js	/^  let prev = null;$/;"	v
prevTime	Problems/Stack/car-fleet.js	/^  let prevTime = 0;$/;"	v
prevVal	Problems/Stack/valid-parenthenses.js	/^      const prevVal = stack.pop();$/;"	C
printList	Practise-stuff/Implementations/doubly-linked-list.js	/^  printList() {$/;"	m	class:DoublyLinkedList
printList	Practise-stuff/Implementations/linked-list.js	/^  printList() {$/;"	m	class:LinkedList
productExceptSelf	Problems/Arrays/product-of-array-except-self.js	/^const productExceptSelf = (nums) => {$/;"	f
push	Practise-stuff/Implementations/stack.js	/^  push(value) {$/;"	m	class:Stack
push	Practise-stuff/Implementations/stack.js	/^  push(value) {$/;"	m	class:arrayStack
push	Problems/Heap/find-median-from-data-stream.js	/^  push(value) {$/;"	m	class:MaxHeap
push	Problems/Heap/find-median-from-data-stream.js	/^  push(value) {$/;"	m	class:MinHeap
push	Problems/Stack/implement-queue-using-stacks.js	/^  push(val) {$/;"	m	class:MyQueue
push	Problems/Stack/implement-queue-using-stacks.js	/^Queue.prototype.push = function (x) {$/;"	m	class:Queue
push	Problems/Stack/min-stack.js	/^MinStack.prototype.push = function (val) {$/;"	m	class:MinStack
pushStack	Problems/Stack/implement-queue-using-stacks.js	/^    this.pushStack = [];$/;"	p	method:MyQueue.constructor
put	Problems/Linked-list/LRU-cache.js	/^  put(key, value) {$/;"	m	class:LRUCache
q	Practise-stuff/Implementations/bfs-on-graph-matrix.ts	/^  const q: number[] = [source];$/;"	C	function:bfs
q	Practise-stuff/Implementations/breadth-first-search.ts	/^  const q: (BinaryNode<number> | null)[] = [head];$/;"	C	function:bfs
queue	Problems/Trees/BT-level-order-treversal.js	/^  const queue = [root];$/;"	v
queue	Problems/Trees/BT-right-side-view.js	/^  const queue = [root];$/;"	v
r	Problems/Two-pointers/3sum.js	/^    let r = sorted.length - 1;$/;"	v
rIdx	Practise-stuff/Implementations/min-heap.ts	/^    const rIdx = this.rightChild(idx);$/;"	C	method:MinHeap.heapifyDown
rIdx	Practise-stuff/Implementations/min-heap.ts	/^    const rV = this.data[rIdx];$/;"	C	method:MinHeap.heapifyDown
rV	Practise-stuff/Implementations/min-heap.ts	/^    const rV = this.data[rIdx];$/;"	C	method:MinHeap.heapifyDown
recursiveMultiple	Practise-stuff/Implementations/recursion.js	/^const recursiveMultiple = (nums) => {$/;"	f
regex	Problems/Two-pointers/valid-palindrome.js	/^  const regex = \/[^a-zA-Z0-9]\/g;$/;"	C
remove	Practise-stuff/Implementations/binary-tree.js	/^  remove(value) {$/;"	m	class:BinarySearchTree
remove	Practise-stuff/Implementations/doubly-linked-list.js	/^  remove(index) {$/;"	m	class:DoublyLinkedList
remove	Practise-stuff/Implementations/global.d.ts	/^  remove(item: T): T | undefined;$/;"	m	interface:List
remove	Practise-stuff/Implementations/linked-list.js	/^  remove(index) {$/;"	m	class:LinkedList
remove	Problems/Heap/design-twitter.js	/^function remove(heap) {$/;"	f
remove	Problems/Heap/k-closet-points-to-origin.js	/^  function remove(heap, weightFunction) {$/;"	f
removeAt	Practise-stuff/Implementations/global.d.ts	/^  removeAt(index: number): T | undefined;$/;"	m	interface:List
removeNthFromEnd	Problems/Linked-list/remove-nth-node.js	/^const removeNthFromEnd = (head, n) => {$/;"	f
reorderList	Problems/Linked-list/reorder-list.js	/^const reorderList = (head) => {$/;"	f
res	Problems/Arrays/top-k-frequent-elements.js	/^  const res = [];$/;"	v
res	Problems/Backtracking/combination-sum-II.js	/^  const res = [];$/;"	v
res	Problems/Stack/generate-parentheses.js	/^  const res = [];$/;"	v
res	Problems/Trees/BT-level-order-treversal.js	/^  const res = [];$/;"	v
res	Problems/Trees/BT-right-side-view.js	/^  const res = [];$/;"	v
res	Problems/Two-pointers/3sum.js	/^  const res = [];$/;"	v
res	Problems/Two-pointers/trapping-rain-water.js	/^  let res = 0;$/;"	v
result	Problems/Arrays/product-of-array-except-self.js	/^  const result = [];$/;"	v
result	Problems/Arrays/top-k-frequent-elements.js	/^  const result = [];$/;"	v
result	Problems/Backtracking/combination-sum.js	/^  const result = [];$/;"	v
result	Problems/Backtracking/palindrome-partitioning.js	/^  const result = [];$/;"	v
result	Problems/Backtracking/permutation.js	/^  const result = [];$/;"	v
result	Problems/Backtracking/subsets.js	/^  const result = [[]];$/;"	v
result	Problems/Backtracking/word-search.js	/^    const result =$/;"	C
result	Problems/Graph/pacific-altnatic-water-flow.js	/^  const result = [];$/;"	v
result	Problems/Trees/Kth-smallest-element-in-BST.js	/^  const result = [];$/;"	v
result	Problems/Trie/word-search-2.js	/^	const result = []; \/\/ Array to store the found words$/;"	v
rev	Problems/Two-pointers/valid-palindrome.js	/^  const rev = str.split("").reverse().join("");$/;"	C
revN	Problems/Arrays/rotate-array.js	/^const revN = (nums, from, to) => {$/;"	f
reverse	Problems/Arrays/reverse-string.js	/^function reverse(string) {$/;"	f
reverseKGroup	Problems/Linked-list/reverse-nodes-in-k-group.js	/^const reverseKGroup = (head, k) => {$/;"	f
reverseList	Problems/Linked-list/reverse-linked-list.js	/^const reverseList = (head) => {$/;"	f
reverseStr	Problems/Arrays/reverse-string.js	/^const reverseStr = (str) => {$/;"	f
reverseString	Problems/Arrays/reverse-string.js	/^function reverseString(param) {$/;"	f
right	Problems/Backtracking/palindrome-partitioning.js	/^    let right = str.length - 1;$/;"	v
right	Problems/Heap/last-stone-weight.js	/^  const right = i * 2 + 2;$/;"	C
right	Problems/Linked-list/remove-nth-node.js	/^  let right = head;$/;"	v
right	Problems/Trees/diameter-of-BT.js	/^    const right = maxDepth(root.right); \/\/Same above$/;"	C
right	Problems/Trees/maximum-depth-of-invert-tree.js	/^  const right = maxDepth(root.right);$/;"	C
right	Problems/Two-pointers/container-with-most-water.js	/^  let [left, right, maxArea] = [0, height.length - 1, 0];$/;"	v
right	Problems/Two-pointers/trapping-rain-water.js	/^  let right = height.length - 1;$/;"	v
right	Problems/Two-pointers/two-sum.js	/^  let right = numbers.length - 1;$/;"	v
right	Problems/Two-pointers/valid-palindrome.js	/^  let right = s.length - 1;$/;"	v
rightChild	Practise-stuff/Implementations/min-heap.ts	/^  private rightChild(idx: number): number {$/;"	m	class:MinHeap
rightMax	Problems/Trees/BT-max-path-sum.js	/^    let rightMax = dfs(root.right);$/;"	v
rightMax	Problems/Two-pointers/trapping-rain-water.js	/^  let rightMax = height[right];$/;"	v
rightSideView	Problems/Trees/BT-right-side-view.js	/^const rightSideView = (root) => {$/;"	f
root	Problems/Trees/construct-BT-from-preorder-&-inorder.js	/^    const root = new TreeNode(root_val);$/;"	C
root_val	Problems/Trees/construct-BT-from-preorder-&-inorder.js	/^    const root_val = preorder.shift();$/;"	C
rotate	Problems/Arrays/rotate-array.js	/^const rotate = (nums, k) => {$/;"	f
row	Problems/Arrays/valid-soduku.js	/^    const row = new Set();$/;"	C
rows	Problems/Backtracking/n-queens.js	/^    const rows = board.map((_row) => _row.join(""));$/;"	C
rows	Problems/Graph/pacific-altnatic-water-flow.js	/^  const rows = heights.length;$/;"	C
search	Practise-stuff/Implementations/depth-first-search.ts	/^function search(curr: BinaryNode<number> | null, needle: number): boolean {$/;"	f
search	Practise-stuff/Implementations/trie.js	/^  search(word) {$/;"	m	class:Trie
search	Problems/Trie/design-add&search-words.js	/^	search(word) {$/;"	m	class:WordDictionary
search	Problems/Trie/implement-trie.js	/^	search(word) {$/;"	m	class:Trie
seen	Practise-stuff/Implementations/bfs-on-graph-matrix.ts	/^  const seen = new Array(graph.length).fill(false);$/;"	C	function:bfs
seen	Practise-stuff/Implementations/dfs-on-graph-list.ts	/^  const seen: boolean[] = new Array(graph.length).fill(false);$/;"	C	function:dfs
seen	Practise-stuff/maze-solver.ts	/^  const seen: boolean[][] = [];$/;"	C	function:solve
serialize	Problems/Trees/serialize-deserialize-BT.js	/^function serialize(root) {$/;"	f
set	Practise-stuff/Implementations/hash-table.js	/^  set(key, value) {$/;"	m	class:HashTable
set	Problems/Arrays/contains-duplicate.js	/^  const set = new Set(nums);$/;"	C
set	Problems/Arrays/longest-consecutive-sequence.js	/^  const set = new Set(nums);$/;"	C
showConnections	Practise-stuff/Implementations/graph.js	/^  showConnections() {$/;"	m	class:Graph
size	Problems/Heap/Kth-largest-element-in-an-array.js	/^  size() {$/;"	m	class:MinHeap
size	Problems/Heap/find-median-from-data-stream.js	/^  size() {$/;"	m	class:MaxHeap
size	Problems/Heap/find-median-from-data-stream.js	/^  size() {$/;"	m	class:MinHeap
size	Problems/Heap/task-scheduler.js	/^  this.size = () => this.list.length;$/;"	f	class:MaxHeap
slow	Problems/Linked-list/find-duplicate-number.js	/^  let slow = 0;$/;"	v
slow	Problems/Linked-list/reorder-list.js	/^  let slow = head;$/;"	v
slow2	Problems/Linked-list/find-duplicate-number.js	/^  let slow2 = 0;$/;"	v
solution	Problems/Heap/k-closet-points-to-origin.js	/^  const solution = [];$/;"	v
solve	Practise-stuff/maze-solver.ts	/^export default function solve($/;"	f
solveNQueens	Problems/Backtracking/n-queens.js	/^const solveNQueens = (n) => {$/;"	f
sorted	Problems/Two-pointers/3sum.js	/^  const sorted = [...nums].sort((a, b) => a - b);$/;"	v
stack	Problems/Stack/evaluate-reverse-polish-notation.js	/^  const stack = [];$/;"	v
stack	Problems/Stack/generate-parentheses.js	/^  const stack = [];$/;"	v
stack	Problems/Stack/implement-queue-using-stacks.js	/^  this.stack = [];$/;"	p	class:Queue
stack	Problems/Stack/min-stack.js	/^  this.stack = [];$/;"	p	class:MinStack
stack	Problems/Stack/valid-parenthenses.js	/^  const stack = [];$/;"	v
startsWith	Practise-stuff/Implementations/trie.js	/^  startsWith(prefix) {$/;"	m	class:Trie
startsWith	Problems/Trie/implement-trie.js	/^	startsWith(prefix) {$/;"	m	class:Trie
store	Problems/Arrays/top-k-frequent-elements.js	/^  const store = [...map.entries()].sort((a, b) => b[1] - a[1]);$/;"	v
str	Problems/Two-pointers/valid-palindrome.js	/^  const str = s$/;"	C
str	Problems/Two-pointers/valid-palindrome.js	/^  const str = s.replace(\/[^a-z0-9]\/gi, "").toLowerCase();$/;"	C
str	Problems/Two-pointers/valid-palindrome.js	/^  const str = s.replace(regex, "").toLowerCase();$/;"	C
streak	Problems/Arrays/longest-consecutive-sequence.js	/^  let streak = 0;$/;"	v
subsets	Problems/Backtracking/subsets.js	/^const subsets = (nums) => {$/;"	f
subsetsWithDup	Problems/Backtracking/subset-II.js	/^const subsetsWithDup = (nums) => {$/;"	f
substring	Problems/Backtracking/palindrome-partitioning.js	/^      const substring = s.substring(startIdx, i + 1);$/;"	C
suffix	Problems/Arrays/product-of-array-except-self.js	/^  const suffix = [];$/;"	v
sum	Problems/Arrays/maximum-subarray.js	/^  let sum = 0;$/;"	v
sum	Problems/Linked-list/add-two-numbers.js	/^  let sum = 0;$/;"	v
sum	Problems/Two-pointers/3sum.js	/^      const sum = sorted[i] + sorted[l] + sorted[r];$/;"	C
swap	Problems/Backtracking/permutation.js	/^function swap(nums, i, j) {$/;"	f
swap	Problems/Heap/Kth-largest-element-in-an-array.js	/^  swap(i, j) {$/;"	m	class:MinHeap
swap	Problems/Heap/find-median-from-data-stream.js	/^  swap(i, j) {$/;"	m	class:MaxHeap
swap	Problems/Heap/find-median-from-data-stream.js	/^  swap(i, j) {$/;"	m	class:MinHeap
temp	Problems/Heap/last-stone-weight.js	/^    const temp = nums[i];$/;"	C
temp	Problems/Linked-list/reorder-list.js	/^    const temp = current.next;$/;"	C
temp	Problems/Linked-list/reorder-list.js	/^    let temp = h1.next;$/;"	v
temp	Problems/Linked-list/reverse-linked-list.js	/^    const temp = head.next;$/;"	C
temp	Problems/Trees/invert-tree.js	/^  const temp = root.left;$/;"	C
threeSum	Problems/Two-pointers/3sum.js	/^const threeSum = (nums) => {$/;"	f
time	Problems/Heap/task-scheduler.js	/^  let time = 0;$/;"	v
top	Problems/Stack/min-stack.js	/^MinStack.prototype.top = function () {$/;"	m	class:MinStack
topKFrequent	Problems/Arrays/top-k-frequent-elements.js	/^const topKFrequent = (nums, k) => {$/;"	f
topKFrequent2	Problems/Arrays/top-k-frequent-elements.js	/^const topKFrequent2 = (nums, k) => {$/;"	f
trap	Problems/Two-pointers/trapping-rain-water.js	/^const trap = (height) => {$/;"	f
traverse	Practise-stuff/Implementations/binary-tree.js	/^function traverse(node) {$/;"	f
traverseToIndex	Practise-stuff/Implementations/doubly-linked-list.js	/^  traverseToIndex(index) {$/;"	m	class:DoublyLinkedList
traverseToIndex	Practise-stuff/Implementations/linked-list.js	/^  traverseToIndex(index) {$/;"	m	class:LinkedList
tree	Practise-stuff/Implementations/binary-tree.js	/^  const tree = { value: node.value };$/;"	v	function:traverse
tree	Practise-stuff/Implementations/binary-tree.js	/^const tree = new BinarySearchTree();$/;"	C
trie	Problems/Trie/word-search-2.js	/^	const trie = new TrieNode(); \/\/ Trie data structure to store the words$/;"	C
tweetMap	Problems/Heap/design-twitter.js	/^    this.tweetMap[userId] = [];$/;"	p	method:Twitter.postTweet
twoSum	Problems/Arrays/two-sum.js	/^function twoSum(nums, target) {$/;"	f
twoSum	Problems/Two-pointers/two-sum.js	/^const twoSum = (numbers, target) => {$/;"	f
twoSumAdvanceV	Problems/Arrays/two-sum.js	/^const twoSumAdvanceV = (nums, target) => {$/;"	f
unfollow	Problems/Heap/design-twitter.js	/^Twitter.prototype.unfollow = function (followerId, followeeId) {$/;"	m	class:Twitter
update	Practise-stuff/Implementations/global.d.ts	/^  update(key: K, value: V): void;$/;"	m	interface:ILRU
v	Practise-stuff/Implementations/min-heap.ts	/^    const v = this.data[idx];$/;"	C	method:MinHeap.heapifyDown
v	Practise-stuff/Implementations/min-heap.ts	/^    const v = this.data[idx];$/;"	C	method:MinHeap.heapifyUp
value	Practise-stuff/Implementations/binary-tree.js	/^  const tree = { value: node.value };$/;"	p	variable:traverse.tree
value	Practise-stuff/Implementations/doubly-linked-list.js	/^      value: value,$/;"	p	property:DoublyLinkedList.constructor.head
value	Practise-stuff/Implementations/doubly-linked-list.js	/^      value: value,$/;"	p	variable:DoublyLinkedList.append.newNode
value	Practise-stuff/Implementations/doubly-linked-list.js	/^      value: value,$/;"	p	variable:DoublyLinkedList.insert.newNode
value	Practise-stuff/Implementations/doubly-linked-list.js	/^      value: value,$/;"	p	variable:DoublyLinkedList.prepend.newNode
value	Practise-stuff/Implementations/linked-list.js	/^      value: value,$/;"	p	property:LinkedList.constructor.head
value	Practise-stuff/Implementations/linked-list.js	/^      value: value,$/;"	p	variable:LinkedList.append.newNode
value	Practise-stuff/Implementations/linked-list.js	/^      value: value,$/;"	p	variable:LinkedList.insert.newNode
value	Practise-stuff/Implementations/linked-list.js	/^      value: value,$/;"	p	variable:LinkedList.prepend.newNode
visited	Problems/Graph/clone-graph.js	/^  const visited = {};$/;"	C
walk	Practise-stuff/Implementations/dfs-on-graph-list.ts	/^function walk($/;"	f
walk	Practise-stuff/maze-solver.ts	/^function walk($/;"	f
x	Practise-stuff/maze-solver.ts	/^    const [x, y] = dir[index];$/;"	C	function:walk
y	Practise-stuff/maze-solver.ts	/^    const [x, y] = dir[index];$/;"	C	function:walk
